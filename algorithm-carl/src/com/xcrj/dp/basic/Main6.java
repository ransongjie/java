package com.xcrj.dp.basic;

/**
 * https://leetcode.cn/problems/unique-binary-search-trees/
 * 不同的二叉搜索树
 */
public class Main6 {
    /**
     * 二叉搜索树，左小右大
     *
     * @param n
     * @return
     */
    public int numTrees(int n) {
        // dp数组
        // dp[i]=共i个结点能够形成的二叉搜索树的数量
        // =值为1~i的结点能够形成的二叉搜索树的数量
        // =元素1为头结点搜索树的数量 + 元素2为头结点搜索树的数量 + ... + 元素i为头结点搜索树的数量
        // =
        int[] dp = new int[n + 1];
        // 初始化
        dp[0] = 1;// 空结点也认为是二叉搜索树
        // 状态转移，遍历顺序
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                /**
                 * 示例：n=3
                 * 元素1为头结点二叉搜索树的数量 = 以1为头结点左子树有0个元素的搜索树数量 * 以1为头结点右子树有2个元素的搜索树数量
                 * 元素2为头结点二叉搜索树的数量 = 以2为头结点左子树有1个元素的搜索树数量 * 以2为头结点右子树有1个元素的搜索树数量
                 * 元素3为头结点二叉搜索树的数量 = 以3为头结点左子树有2个元素的搜索树数量 * 以3为头结点右子树有0个元素的搜索树数量
                 * dp[3] = 元素1为头结点搜索树的数量 + 元素2为头结点搜索树的数量 + 元素3为头结点搜索树的数量
                 * dp[3] = dp[0] * dp[2] + dp[1] * dp[1] + dp[2] * dp[0]
                 * dp[i] += 以j为头结点左子树二叉搜索树数量 * 以j为头结点右子树二叉搜索树数量
                 * dp[i] += dp[以j为头结点左子树结点数量] * dp[以j为头结点右子树结点数量]
                 * dp[i] += dp[j - 1] * dp[i - j]
                 */
                dp[i] += dp[j - 1] * dp[i - j];
            }
        }
        // 结果
        return dp[n];
    }
}
